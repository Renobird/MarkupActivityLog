<?php

class MarkupActivityLog extends WireData implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title'     => __('Activity Log'),
            'version'   => '1.0.1',
            'author'    => 'Tom Reno (Renobird)',
            'summary'   => __('Adds an Activity Log tab to pages. Configurable to specific templates.'),
            'href' => '',
            'singular'  => true,
            'autoload'  => true,
            'installs'  => 'ProcessActivityLogService',
            //'requires'  => 'ProcessActivityLogService', // This does work properly for uninstall. Perhaps fixed on dev.
            );
    }
    
    public static function getDefaultConfig() {
        return array(
            'templateList'  => array(),
            'dateFormat'    => 'M d, Y',
            'timeFormat'    => 'h:i:s a',
            'resultLimit'   => '0',
            'userFields'    => 'name', 
        );
    }


    public static function getDefaultFields() {
        return array(
            'activity_tab',
            'activity_limit',
            'activity_tab_END',
        );
    }


    // Only some built-in fields that are part of the pages table can be used.
    protected $builtInPageFields = array(
        'parent'    => 'Parent',
        'template'  => 'Template',
        'name'      => 'Name',
        'status'    => 'Status',
    );

    public function __construct() {
        foreach(self::getDefaultConfig() as $key => $value) {
            $this->$key = $value;
        }
    }


    public function init() {
        $this->pages->addHookAfter("ProcessPageEdit::buildFormContent", $this, 'hookBuildList');
    }


    public function ready() {
        if($this->page->process != 'ProcessPageEdit') return;
        $p = wire('pages')->get($this->config->input->get->id);
        if(in_array($p->template->name, $this->templateList)) {
            $this->pages->addHookAfter('saveReady', $this, 'hookUpdateLog');
        }
    }

    public function logChanges($page) {
        if(in_array($page->template->name, $this->templateList)) {
            $this->pages->addHookAfter('saveReady', $this, 'hookUpdateLog');
        }
    }

    public function loadModuleAssets(){
        // add module CSS/JS - not autoloaded when entending WireData
        $this->modules->get('JqueryMagnific'); // load fancy box
        $this->config->styles->add($this->config->urls->MarkupActivityLog . "MarkupActivityLog.css");
        $this->config->scripts->add($this->config->urls->MarkupActivityLog . "MarkupActivityLog.js"); 
    }

    public function hookBuildList(HookEvent $event) {
        
        $form = $event->return;
        if(!$form->get('activity_tab')) return;

        $this->loadModuleAssets();

        $page = $this->getEditedPage();
        
        // markup field for displaying entries
        $field = $this->modules->get('InputfieldMarkup'); 
        $field->markupText = $this->_('No Activity'); // default value
        
        // limit results
        $limit = '';
        $resultLimit = (int) trim($this->resultLimit); // set to default limit set in config
        $page->activity_limit != 0 ? $resultLimit = $page->activity_limit : ''; // check for page level limit

        if ($resultLimit > 0){
            $limit = "LIMIT $resultLimit";
        }

        // query
        $results = $this->getResults($page, $limit);

        // if results
        if ($results->num_rows > 0){
            $field->markupText = $this->getEntries($results);
        }

        // add current result limit to the label for easy reference
        if ($page->activity_limit > 0){
            $limit = $form->get('activity_limit');
            $limit->label = $limit->label . " ({$page->activity_limit})"; 
        }

        // insert markup field into the activity tab
        $form->insertAfter($field, $form->get('activity_limit'));
    }

    public function render(page $page, $limit = 0) {
        
        if(!in_array($page->template->name, $this->templateList)) {
            return "<p class='$this->className error'>" . __("Activity log cannot be rendered for this page. Check templates in module config.") . "</p>"; 
        }

        if ($this->page->template == "admin"){
           $this->loadModuleAssets();
        }

        if ($limit > 0 && is_int($limit)){
            $limit = "LIMIT $limit";
        } else {
            $limit = '';
        }

        // query
        $results = $this->getResults($page, $limit);

        // if results
        if ($results->num_rows > 0){
            return $this->getEntries($results);
        } else{
            return false;
        }

    }

    private function getResults($page, $limit){
        return $this->db->query("SELECT * FROM {$this->className} WHERE `page_id` = $page->id  ORDER BY `date` DESC $limit");
    }


    public function hookUpdateLog(HookEvent $event) {
        $page = $event->arguments[0];
        $this->logFieldChanges($page);
    }
    

    public function logFieldChanges($page) {
        $changes = $page->getChanges();
        if (empty($changes)) return;
        $this->prepEntry($page, $changes);
    }


    private function renderMarkup(array $entries){
        
        $entriesObject = json_decode(json_encode($entries), FALSE); // convert to JSON object for easier use in the markup file.
        $markup = new TemplateFile(dirname(__FILE__) . "/{$this->className}.inc");
        $markup->set('entries', $entriesObject);
        
        return $markup->render();
    }


    private function getEntries($results) {
       
       $entries = array();
       $date = null;
        while ($row = $results->fetch_assoc()) {
            $dateStamp = null;
            $rowDate = date($this->dateFormat, strtotime($row['date']));
            if ($date == null || $date != $rowDate){
                $dateStamp = $rowDate;
            }
            $date = $rowDate;
            $entries[] = $this->getEntry($row, $dateStamp);
        };
        return $this->renderMarkup($entries);
    }


    private function getEntry($row, $dateStamp) {
        
        $dateStamp == null ? $dateStamp == "" : ""; // if the date is set to null, change to empty string before replacement
        $time = date($this->timeFormat, strtotime($row['date']));
        $changes = $this->getFieldChanges($row['id'], $row['changes']);
        $user = wire('users')->get("id=".$row['user']);
        $user_fields = $this->getUserFields($user);

        $entry = array();
        $entry['date'] = $dateStamp;
        $entry['time'] = $time;
        $entry['user_fields'] = $user_fields;
        $entry['changes'] = $changes;

        return $entry;
    }


    public function getFieldChanges($entryID, $changes) {
        
        $date = null;
        $out = array();
        $changes = json_decode($changes);
        
        foreach($changes as $entry){
            
            $old = $entry->change->old;
            $new = $entry->change->new;

            // built in fields are part of the pages table and treated a little different.
            if (array_key_exists($entry->field, $this->builtInPageFields)){
                $type = $entry->field;
                $fieldLabel = $this->builtInPageFields["$entry->field"];

            } else {
                $field = wire()->fields->get($entry->field);
                $fieldLabel = $field->get('label|name');
                $type = $field->type->name;
            }

            switch ($type) {
                case 'FieldtypeTextarea':
                    $out[] = $this->getChangeDiff($entryID, $field->id, $fieldLabel);
                    break;

                case 'status':
                    $out[] = $this->formatStatusChange($fieldLabel, $type, $old, $new);
                    break;
                
                default:
                    $out[] = array("field" => $fieldLabel, "type" => $type, "old" => $old, "new" => $new);
                    break;
            }
        }

        return $out;
    }

    private function getChangeDiff($entryID, $fieldID, $fieldLabel) {
        
        $page = $this->getEditedPage();
        $out = array();
        $out['field'] = $fieldLabel;
        $out['type'] = "FieldtypeTextarea";
        $out['attrs'] = "?ids=$page->id.$entryID.$fieldID";
        
        return $out;
    }

    private function formatStatusChange($fieldLabel, $type, $old, $new) {
        
        $oldVals = array();
        $newVals = array();
        
        foreach(Page::getStatuses() as $status => $value) {
            if ($old & $value) $oldVals[] = $status;
            if ($new & $value) $newVals[] = $status;
        }

        // getStatuses() doesn't contain 1 (statusOn, which is essentially the same as published).
        // Check if 2048 (statusUnpublished) is set, if it's not, then we can safely add published to the arrays.
        $old & 2048 ? "" : $oldVals[] = "published"; // published
        $new & 2048 ? "" : $newVals[] = "published";

        $out = array();
        $out['field'] = $fieldLabel;
        $out['type'] = $type;
        $out['old'] = implode(' | ', $oldVals);
        $out['new'] = implode(' | ', $newVals);

        return $out;
    }


    public function pageFieldTitle($field, $multi = false) {

        if ($multi){
            $out = "";
            foreach ($field as $p){
                if ($p instanceof User){ 
                    $out .= $this->getUserFields($p) . ', ';
                
                } else {
                    $out .= $this->formatPageTitle($p);
                }
          }
          return rtrim($out, ', ');
        
        } else {
            return $this->formatPageTitle($p);
        }
        
    }


    public function formatPageTitle($page) {
        return $page->title != '' ? $page->title : $page->name;
    }


    public function getUserFields(User $user) {
        
        $out = "";
        $userFields = explode(',', $this->userFields);
        
        foreach ($userFields as $f){
            $f = trim($f);
            if ($f == 'name'){
                $out .= "{$user->name} "; // can't use wire('fields') to get name field
            } else{
                $field = wire('fields')->get($f);
                if ($field->type == "FieldtypeText" || $field->type == "FieldtypeConcat"){
                    $out .= "{$user->$f} ";
                }
            }
        }

        return rtrim($out, ' '); // clean up the trailing space. 
    }


    private function getEditedPage() {
        return wire('pages')->get($this->input->get->id);
    }


    public function prepEntry($page, $changes) {

        $clone = clone($page);
        $this->pages->uncache($clone);
        $old = $this->pages->get($clone->id); // get page from db

        $data = $this->changesToJSON($page, $old, $changes);

        if ($data){
            $this->saveEntry($page, $this->user->id, $data);
        }
    }


    private function changesToJSON($page, $old, $changes) {

        $encode = array();

        foreach($changes as $change){
            if ($change == 'activity_limit') continue;

            // built in fields are part of the pages table and treated a little different.
            if (array_key_exists($change, $this->builtInPageFields)){
                $fieldID = $change;
            } else {
                $fieldID = wire()->fields->get($change)->id;
            }

            // when logging changes from the api, there could be fields that do not exists as part of the changes
            // this happens when you add fields to a inputfieldWrapper that are not actual fields in ProcessWire.
            // TODO: update so that these fields can be tracked as well.
            if ($fieldID == null) continue;

            // we want to show the old/new path when the parent page changes
            if ($change == 'parent'){
                $oldVal = $old->$change->path;
                $newVal = $page->$change->path;

            } else{
               $oldVal = $this->formatChange($old->$change);
               $newVal = $this->formatChange($page->$change);
            }

            $change = array(
                'old' => $oldVal,
                'new' => $newVal,
            ); 
            
            $data = array(
                'field' => $fieldID,
                'change' => $change,
            );

            $encode[] = $data;
        }

        // If "activity_limit" is the only field changed.
        // return false to prevent saveEntry() from being called in prepEntry();
        if (empty($encode)) return false; 

        return json_encode($encode);
    }


    private function formatChange($field) {

        switch($field->className) {
            case 'PageArray':
            case 'SelectableOptionArray':
                return $this->pageFieldTitle($field, true);

            case 'Page':
            case 'SelectableOption':
                return $this->formatPageTitle($field);
                
            case 'User':
                return $this->getUserFields($field);
            
            default:
                $field = preg_replace('/\p{C}+/u', '', $field); // clear all hidden characters
                return $field;
        }
    }


    private function saveEntry($page, $user, $data){
        
        $page_id = $page->id;
        $user = $this->db->escape_string($user);
        $data = $this->db->escape_string($data);

        $sql = "INSERT INTO {$this->className} 
                SET `page_id` = '$page_id', `user` = '$user', `changes` = '$data'";

        return $this->db->query($sql);
    }

    // used by the service module to get dateFormat
    public function getDateFormat() {
       return $this->dateFormat;
    }

    // used by the service module to get timeFormat
    public function getTimeFormat() {
       return $this->timeFormat;
    }

    static public function getModuleConfigInputfields(array $data) {
        
        $fields = wire('fields');
        $tpl = wire('templates');
        $modules = wire('modules');
        $input = wire('input');
        $userFields = wire('templates')->get('user')->fields;

        // Merge default settings
        $defaults = self::getDefaultConfig();
        $data = array_merge($defaults, $data);

        // result limits
        $resultLimit = trim($data['resultLimit']);
        $resultLimit == "" ? $resultLimit = 0 : '';

        foreach($tpl as $template) { 
            if($template->flags & Template::flagSystem) continue; // exclude system templates
            $templates[] = $template;
        }

        // add or remove fields from templates
        if($input->post->submit_save_module) {

            $templateList = (array) $input->post->templateList;
            $defaultFields = self::getDefaultFields();

            foreach($templates as $template) {
                if(in_array($template->name, $templateList)) {
                    if(!$template->hasField('activity_tab')) { //add fields to template
                        foreach($defaultFields as $activityField) {
                            $template->fields->add($fields->get($activityField));
                        }
                        $template->fields->save();
                    } 

                } else {            
                    if($template->hasField('activity_tab')) {  // remove fields if no longer in template list                        
                        foreach($template->fields as $templateField) {
                            if(in_array($templateField->name, self::getDefaultFields())) {
                                $template->fields->remove($templateField);
                            }
                        }
                        $template->fields->save();
                    } else {
                        continue;
                    }
                }
            }
        }

        $form = new InputfieldWrapper();

        // Template selection
        $field = $modules->get("InputfieldAsmSelect");
        $field->attr("name+id", "templateList");
        $field->label = __("Templates");
        $field->description = __("Choose the templates which should get an Activity Log tab.");
        foreach($templates as $template) $field->addOption($template->name);
        $field->value = $data['templateList'];
        $field->notes = __("Be careful with this field. If you remove a template all of it's activity log data will get deleted.");
        $form->add($field);

        $field = $modules->get("InputfieldText");
        $field->attr("name+id", "dateFormat");
        $field->label = __('Date Format');
        $field->description = __('Date format');
        $field->value = $data['dateFormat'];
        $field->columnWidth = 33;
        $form->add($field);

        $field = $modules->get("InputfieldText");
        $field->attr("name+id", "timeFormat");
        $field->label = __('Time Format');
        $field->description = __('Time format');
        $field->value = $data['timeFormat'];
        $field->columnWidth = 33;
        $form->add($field);

        $field = $modules->get("InputfieldInteger");
        $field->attr("name+id", "resultLimit");
        $field->label = __('Result Limit');
        $field->description = __('Limit the number of results. Set to 0 show all activity.');
        $field->value = $resultLimit;
        $field->columnWidth = 34;
        $form->add($field);

        $field = $modules->get("InputfieldText");
        $field->attr("name+id", "userFields");
        $field->label = __('User Field(s)');
        $field->description = __('Comma seperated list of fields from the user template to use for displaying user information. (example: first_name, last_name)');
        $field->value = $data['userFields'];
        $field->notes = __("These can only be text fields. Other field types will be ingnored.");
        $form->add($field);

        return $form;
    }


    public function ___install() {

        $fields = wire('fields');

        if(!$fields->get('activity_tab')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeFieldsetTabOpen');
            $field->name = "activity_tab";
            $field->label = $this->_('Activity Log');
            $field->save();
        }

        if(!$fields->get('activity_limit')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeInteger');
            $field->name = "activity_limit";
            $field->label = $this->_('Set Result Limit');
            $field->description = __('Save page to apply new limit.');
            $field->notes = __('Set to 0 to show all results.');
            $field->collapsed = Inputfield::collapsedYes;
            $field->save();
        }

        if(!$fields->get('activity_tab_END')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeFieldsetClose');
            $field->name = "activity_tab_END";
            $field->label = $this->_('Close an open fieldset');
            $field->save();
        }

        $sql = <<< _SQL
            CREATE TABLE {$this->className} (
                `id`          int (10) unsigned NOT NULL auto_increment,
                `page_id`     int (10) unsigned NOT NULL,
                `date`        timestamp NOT NULL default CURRENT_TIMESTAMP,
                `user`        int (10) unsigned NOT NULL,
                `changes`     text NOT NULL,
                PRIMARY KEY(`id`)
            );
_SQL;
        
        $this->db->query($sql);

    }

    public function ___uninstall() {

        $fields = wire('fields');
        $templates = wire('templates');

        foreach(self::getDefaultFields() as $field) {
            foreach($templates as $template) {
                if(!$template->hasField($field)) continue;
                $template->fields->remove($field);
                $template->fields->save();
            }
            $fields->delete($fields->get($field));
        }

        $this->db->query("DROP TABLE {$this->className}");
    }
}